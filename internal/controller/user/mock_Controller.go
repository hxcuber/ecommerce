// Code generated by mockery v2.43.2. DO NOT EDIT.

package user

import (
	context "context"

	model "github.com/hxcuber/ecommerce/pkg/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/hxcuber/ecommerce/internal/handler/user/request"

	util "github.com/hxcuber/ecommerce/pkg/util"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

type MockController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockController) EXPECT() *MockController_Expecter {
	return &MockController_Expecter{mock: &_m.Mock}
}

// GetUserDetails provides a mock function with given fields: ctx, id
func (_m *MockController) GetUserDetails(ctx context.Context, id util.UUIDString) (model.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserDetails")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString) (model.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString) model.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, util.UUIDString) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockController_GetUserDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDetails'
type MockController_GetUserDetails_Call struct {
	*mock.Call
}

// GetUserDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - id util.UUIDString
func (_e *MockController_Expecter) GetUserDetails(ctx interface{}, id interface{}) *MockController_GetUserDetails_Call {
	return &MockController_GetUserDetails_Call{Call: _e.mock.On("GetUserDetails", ctx, id)}
}

func (_c *MockController_GetUserDetails_Call) Run(run func(ctx context.Context, id util.UUIDString)) *MockController_GetUserDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(util.UUIDString))
	})
	return _c
}

func (_c *MockController_GetUserDetails_Call) Return(_a0 model.User, _a1 error) *MockController_GetUserDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockController_GetUserDetails_Call) RunAndReturn(run func(context.Context, util.UUIDString) (model.User, error)) *MockController_GetUserDetails_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, _a1
func (_m *MockController) RegisterUser(ctx context.Context, _a1 request.PostUsersRegisterRequest) (model.User, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PostUsersRegisterRequest) (model.User, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PostUsersRegisterRequest) model.User); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PostUsersRegisterRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockController_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockController_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.PostUsersRegisterRequest
func (_e *MockController_Expecter) RegisterUser(ctx interface{}, _a1 interface{}) *MockController_RegisterUser_Call {
	return &MockController_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, _a1)}
}

func (_c *MockController_RegisterUser_Call) Run(run func(ctx context.Context, _a1 request.PostUsersRegisterRequest)) *MockController_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.PostUsersRegisterRequest))
	})
	return _c
}

func (_c *MockController_RegisterUser_Call) Return(_a0 model.User, _a1 error) *MockController_RegisterUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockController_RegisterUser_Call) RunAndReturn(run func(context.Context, request.PostUsersRegisterRequest) (model.User, error)) *MockController_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

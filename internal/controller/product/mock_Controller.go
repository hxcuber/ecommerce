// Code generated by mockery v2.43.2. DO NOT EDIT.

package product

import (
	context "context"

	model "github.com/hxcuber/ecommerce/pkg/model"
	mock "github.com/stretchr/testify/mock"

	request "github.com/hxcuber/ecommerce/internal/handler/product/request"

	util "github.com/hxcuber/ecommerce/pkg/util"
)

// MockController is an autogenerated mock type for the Controller type
type MockController struct {
	mock.Mock
}

type MockController_Expecter struct {
	mock *mock.Mock
}

func (_m *MockController) EXPECT() *MockController_Expecter {
	return &MockController_Expecter{mock: &_m.Mock}
}

// GetProductDetails provides a mock function with given fields: ctx, id
func (_m *MockController) GetProductDetails(ctx context.Context, id util.UUIDString) (model.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductDetails")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString) (model.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString) model.Product); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, util.UUIDString) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockController_GetProductDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductDetails'
type MockController_GetProductDetails_Call struct {
	*mock.Call
}

// GetProductDetails is a helper method to define mock.On call
//   - ctx context.Context
//   - id util.UUIDString
func (_e *MockController_Expecter) GetProductDetails(ctx interface{}, id interface{}) *MockController_GetProductDetails_Call {
	return &MockController_GetProductDetails_Call{Call: _e.mock.On("GetProductDetails", ctx, id)}
}

func (_c *MockController_GetProductDetails_Call) Run(run func(ctx context.Context, id util.UUIDString)) *MockController_GetProductDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(util.UUIDString))
	})
	return _c
}

func (_c *MockController_GetProductDetails_Call) Return(_a0 model.Product, _a1 error) *MockController_GetProductDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockController_GetProductDetails_Call) RunAndReturn(run func(context.Context, util.UUIDString) (model.Product, error)) *MockController_GetProductDetails_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterProduct provides a mock function with given fields: ctx, _a1
func (_m *MockController) RegisterProduct(ctx context.Context, _a1 request.PostProductsRequest) (model.Product, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RegisterProduct")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, request.PostProductsRequest) (model.Product, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, request.PostProductsRequest) model.Product); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, request.PostProductsRequest) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockController_RegisterProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterProduct'
type MockController_RegisterProduct_Call struct {
	*mock.Call
}

// RegisterProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 request.PostProductsRequest
func (_e *MockController_Expecter) RegisterProduct(ctx interface{}, _a1 interface{}) *MockController_RegisterProduct_Call {
	return &MockController_RegisterProduct_Call{Call: _e.mock.On("RegisterProduct", ctx, _a1)}
}

func (_c *MockController_RegisterProduct_Call) Run(run func(ctx context.Context, _a1 request.PostProductsRequest)) *MockController_RegisterProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(request.PostProductsRequest))
	})
	return _c
}

func (_c *MockController_RegisterProduct_Call) Return(_a0 model.Product, _a1 error) *MockController_RegisterProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockController_RegisterProduct_Call) RunAndReturn(run func(context.Context, request.PostProductsRequest) (model.Product, error)) *MockController_RegisterProduct_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function with given fields: ctx, id, _a2
func (_m *MockController) UpdateProduct(ctx context.Context, id util.UUIDString, _a2 request.PutProductsProductIdRequest) (model.Product, error) {
	ret := _m.Called(ctx, id, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 model.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString, request.PutProductsProductIdRequest) (model.Product, error)); ok {
		return rf(ctx, id, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString, request.PutProductsProductIdRequest) model.Product); ok {
		r0 = rf(ctx, id, _a2)
	} else {
		r0 = ret.Get(0).(model.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, util.UUIDString, request.PutProductsProductIdRequest) error); ok {
		r1 = rf(ctx, id, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockController_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockController_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id util.UUIDString
//   - _a2 request.PutProductsProductIdRequest
func (_e *MockController_Expecter) UpdateProduct(ctx interface{}, id interface{}, _a2 interface{}) *MockController_UpdateProduct_Call {
	return &MockController_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, id, _a2)}
}

func (_c *MockController_UpdateProduct_Call) Run(run func(ctx context.Context, id util.UUIDString, _a2 request.PutProductsProductIdRequest)) *MockController_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(util.UUIDString), args[2].(request.PutProductsProductIdRequest))
	})
	return _c
}

func (_c *MockController_UpdateProduct_Call) Return(_a0 model.Product, _a1 error) *MockController_UpdateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockController_UpdateProduct_Call) RunAndReturn(run func(context.Context, util.UUIDString, request.PutProductsProductIdRequest) (model.Product, error)) *MockController_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockController creates a new instance of MockController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockController {
	mock := &MockController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

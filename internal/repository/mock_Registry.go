// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"

	backoff "github.com/cenkalti/backoff/v4"

	mock "github.com/stretchr/testify/mock"

	order "github.com/hxcuber/ecommerce/internal/repository/order"

	orderitem "github.com/hxcuber/ecommerce/internal/repository/orderitem"

	product "github.com/hxcuber/ecommerce/internal/repository/product"

	user "github.com/hxcuber/ecommerce/internal/repository/user"
)

// MockRegistry is an autogenerated mock type for the Registry type
type MockRegistry struct {
	mock.Mock
}

type MockRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegistry) EXPECT() *MockRegistry_Expecter {
	return &MockRegistry_Expecter{mock: &_m.Mock}
}

// DoInTx provides a mock function with given fields: ctx, txFunc, overrideBackoffPolicy
func (_m *MockRegistry) DoInTx(ctx context.Context, txFunc func(context.Context, Registry) error, overrideBackoffPolicy backoff.BackOff) error {
	ret := _m.Called(ctx, txFunc, overrideBackoffPolicy)

	if len(ret) == 0 {
		panic("no return value specified for DoInTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, Registry) error, backoff.BackOff) error); ok {
		r0 = rf(ctx, txFunc, overrideBackoffPolicy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegistry_DoInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoInTx'
type MockRegistry_DoInTx_Call struct {
	*mock.Call
}

// DoInTx is a helper method to define mock.On call
//   - ctx context.Context
//   - txFunc func(context.Context , Registry) error
//   - overrideBackoffPolicy backoff.BackOff
func (_e *MockRegistry_Expecter) DoInTx(ctx interface{}, txFunc interface{}, overrideBackoffPolicy interface{}) *MockRegistry_DoInTx_Call {
	return &MockRegistry_DoInTx_Call{Call: _e.mock.On("DoInTx", ctx, txFunc, overrideBackoffPolicy)}
}

func (_c *MockRegistry_DoInTx_Call) Run(run func(ctx context.Context, txFunc func(context.Context, Registry) error, overrideBackoffPolicy backoff.BackOff)) *MockRegistry_DoInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, Registry) error), args[2].(backoff.BackOff))
	})
	return _c
}

func (_c *MockRegistry_DoInTx_Call) Return(_a0 error) *MockRegistry_DoInTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_DoInTx_Call) RunAndReturn(run func(context.Context, func(context.Context, Registry) error, backoff.BackOff) error) *MockRegistry_DoInTx_Call {
	_c.Call.Return(run)
	return _c
}

// Order provides a mock function with given fields:
func (_m *MockRegistry) Order() order.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Order")
	}

	var r0 order.Repository
	if rf, ok := ret.Get(0).(func() order.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(order.Repository)
		}
	}

	return r0
}

// MockRegistry_Order_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Order'
type MockRegistry_Order_Call struct {
	*mock.Call
}

// Order is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) Order() *MockRegistry_Order_Call {
	return &MockRegistry_Order_Call{Call: _e.mock.On("Order")}
}

func (_c *MockRegistry_Order_Call) Run(run func()) *MockRegistry_Order_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_Order_Call) Return(_a0 order.Repository) *MockRegistry_Order_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_Order_Call) RunAndReturn(run func() order.Repository) *MockRegistry_Order_Call {
	_c.Call.Return(run)
	return _c
}

// OrderItem provides a mock function with given fields:
func (_m *MockRegistry) OrderItem() orderitem.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OrderItem")
	}

	var r0 orderitem.Repository
	if rf, ok := ret.Get(0).(func() orderitem.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orderitem.Repository)
		}
	}

	return r0
}

// MockRegistry_OrderItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderItem'
type MockRegistry_OrderItem_Call struct {
	*mock.Call
}

// OrderItem is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) OrderItem() *MockRegistry_OrderItem_Call {
	return &MockRegistry_OrderItem_Call{Call: _e.mock.On("OrderItem")}
}

func (_c *MockRegistry_OrderItem_Call) Run(run func()) *MockRegistry_OrderItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_OrderItem_Call) Return(_a0 orderitem.Repository) *MockRegistry_OrderItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_OrderItem_Call) RunAndReturn(run func() orderitem.Repository) *MockRegistry_OrderItem_Call {
	_c.Call.Return(run)
	return _c
}

// Product provides a mock function with given fields:
func (_m *MockRegistry) Product() product.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Product")
	}

	var r0 product.Repository
	if rf, ok := ret.Get(0).(func() product.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(product.Repository)
		}
	}

	return r0
}

// MockRegistry_Product_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Product'
type MockRegistry_Product_Call struct {
	*mock.Call
}

// Product is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) Product() *MockRegistry_Product_Call {
	return &MockRegistry_Product_Call{Call: _e.mock.On("Product")}
}

func (_c *MockRegistry_Product_Call) Run(run func()) *MockRegistry_Product_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_Product_Call) Return(_a0 product.Repository) *MockRegistry_Product_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_Product_Call) RunAndReturn(run func() product.Repository) *MockRegistry_Product_Call {
	_c.Call.Return(run)
	return _c
}

// User provides a mock function with given fields:
func (_m *MockRegistry) User() user.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for User")
	}

	var r0 user.Repository
	if rf, ok := ret.Get(0).(func() user.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.Repository)
		}
	}

	return r0
}

// MockRegistry_User_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'User'
type MockRegistry_User_Call struct {
	*mock.Call
}

// User is a helper method to define mock.On call
func (_e *MockRegistry_Expecter) User() *MockRegistry_User_Call {
	return &MockRegistry_User_Call{Call: _e.mock.On("User")}
}

func (_c *MockRegistry_User_Call) Run(run func()) *MockRegistry_User_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRegistry_User_Call) Return(_a0 user.Repository) *MockRegistry_User_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegistry_User_Call) RunAndReturn(run func() user.Repository) *MockRegistry_User_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegistry creates a new instance of MockRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegistry {
	mock := &MockRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

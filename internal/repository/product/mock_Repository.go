// Code generated by mockery v2.43.2. DO NOT EDIT.

package product

import (
	context "context"

	model "github.com/hxcuber/ecommerce/pkg/model"
	mock "github.com/stretchr/testify/mock"

	orm "github.com/hxcuber/ecommerce/internal/repository/orm"

	util "github.com/hxcuber/ecommerce/pkg/util"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function with given fields: ctx, product
func (_m *MockRepository) CreateProduct(ctx context.Context, product model.Product) (*orm.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *orm.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) (*orm.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) *orm.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockRepository_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product model.Product
func (_e *MockRepository_Expecter) CreateProduct(ctx interface{}, product interface{}) *MockRepository_CreateProduct_Call {
	return &MockRepository_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, product)}
}

func (_c *MockRepository_CreateProduct_Call) Run(run func(ctx context.Context, product model.Product)) *MockRepository_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Product))
	})
	return _c
}

func (_c *MockRepository_CreateProduct_Call) Return(_a0 *orm.Product, _a1 error) *MockRepository_CreateProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateProduct_Call) RunAndReturn(run func(context.Context, model.Product) (*orm.Product, error)) *MockRepository_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetProductByID(ctx context.Context, id util.UUIDString) (*orm.Product, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *orm.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString) (*orm.Product, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, util.UUIDString) *orm.Product); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, util.UUIDString) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockRepository_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id util.UUIDString
func (_e *MockRepository_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockRepository_GetProductByID_Call {
	return &MockRepository_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockRepository_GetProductByID_Call) Run(run func(ctx context.Context, id util.UUIDString)) *MockRepository_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(util.UUIDString))
	})
	return _c
}

func (_c *MockRepository_GetProductByID_Call) Return(_a0 *orm.Product, _a1 error) *MockRepository_GetProductByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetProductByID_Call) RunAndReturn(run func(context.Context, util.UUIDString) (*orm.Product, error)) *MockRepository_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProductById provides a mock function with given fields: ctx, product
func (_m *MockRepository) UpdateProductById(ctx context.Context, product model.Product) (*orm.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductById")
	}

	var r0 *orm.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) (*orm.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Product) *orm.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orm.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_UpdateProductById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProductById'
type MockRepository_UpdateProductById_Call struct {
	*mock.Call
}

// UpdateProductById is a helper method to define mock.On call
//   - ctx context.Context
//   - product model.Product
func (_e *MockRepository_Expecter) UpdateProductById(ctx interface{}, product interface{}) *MockRepository_UpdateProductById_Call {
	return &MockRepository_UpdateProductById_Call{Call: _e.mock.On("UpdateProductById", ctx, product)}
}

func (_c *MockRepository_UpdateProductById_Call) Run(run func(ctx context.Context, product model.Product)) *MockRepository_UpdateProductById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Product))
	})
	return _c
}

func (_c *MockRepository_UpdateProductById_Call) Return(_a0 *orm.Product, _a1 error) *MockRepository_UpdateProductById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_UpdateProductById_Call) RunAndReturn(run func(context.Context, model.Product) (*orm.Product, error)) *MockRepository_UpdateProductById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
